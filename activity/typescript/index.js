// Ejercicio 1
let arrowFunc = (x) => {
    return Object.keys(x).map((key) => x[key]);
};
const person = {
    name: "Juan",
    age: 30,
    profession: "Developer"
};
console.log(arrowFunc(person));
console.log("Ejercicio 1");
// Ejercicio 2
import { Exercise02 } from "./exercise02.js";
const exercise02 = new Exercise02();
console.log(exercise02.sumOrConcatenate(4, 3)); // 7
console.log(exercise02.sumOrConcatenate(4, "hello")); // 4:hello
console.log(exercise02.sumOrConcatenate("hello", "world")); //hello-world
console.log("Ejercicio 2");
// Ejercicio 3
import { Exercise03 } from "./exercise03.js";
const exercise03 = new Exercise03();
const car = {
    tires: 4,
    turnOnEngine: () => {
        console.log("Turning on  car engine");
        return "Turning on  car engine";
    },
    pressPedal: () => {
        console.log("Pressing car pedal");
        return "Pressing car pedal";
    }
};
const motorcycle = {
    tires: 2,
    turnOnEngine: () => {
        console.log("Turning on motorcycle engine");
        return "Turning on motorcycle engine";
    },
    openThrottle() {
        console.log("Opening motorcycle throttle");
        return "Opening motorcycle throttle";
    }
};
exercise03.startMartch(car);
exercise03.startMartch(motorcycle);
console.log("Ejercicio 3");
// Ejercicio 4
import { Exercise04 } from "./exercise04.js";
const exercise04 = new Exercise04();
const strArray = ['Hello', 'World', 'Im', 'a', 'Full', 'Stack', 'Developer'];
const numArray = [1, 2, 3, 4, 5, 6, 7];
const mixedArray = ['Hello', 'I', 'have', 3, 'tasks'];
const unsupportedArray = [{ name: 'Lucas', surname: 'Fernandez' }, 'Hello', 22];
const newStrArray = exercise04.removeFirstEntry(strArray);
const newNumArray = exercise04.removeFirstEntry(numArray);
const newMixedArray = exercise04.removeFirstEntry(mixedArray);
//const newUnsupportedArray = exercise04.removeFirstEntry(unsupportedArray); //--> will fail
console.log(newStrArray); // --> ['World', 'Im', 'a', 'Full', 'Stack', 'Developer'];
console.log(newNumArray); // --> [2, 3, 4, 5, 6, 7];
console.log(newMixedArray); // --> ['I', 'have', 3, 'tasks'];
console.log("Ejercicio 4");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFVLEVBQTJCLEVBQUU7SUFDcEQsT0FBUSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBRSxDQUFDLEdBQVksRUFBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFZO0lBQ3BCLElBQUksRUFBRSxNQUFNO0lBQ1osR0FBRyxFQUFFLEVBQUU7SUFDUCxVQUFVLEVBQUUsV0FBVztDQUMxQixDQUFBO0FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRzFCLGNBQWM7QUFFZCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUVwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7QUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO0FBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYTtBQUN6RSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRTFCLGNBQWM7QUFDZCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUVwQyxNQUFNLEdBQUcsR0FBUztJQUNkLEtBQUssRUFBRSxDQUFDO0lBQ1IsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0QyxPQUFPLHdCQUF3QixDQUFDO0lBQ3BDLENBQUM7SUFDRCxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sb0JBQW9CLENBQUM7SUFDaEMsQ0FBQztDQUNKLENBQUE7QUFDRCxNQUFNLFVBQVUsR0FBZ0I7SUFDNUIsS0FBSyxFQUFFLENBQUM7SUFDUixZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sOEJBQThCLENBQUM7SUFDMUMsQ0FBQztJQUNELFlBQVk7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsT0FBTyw2QkFBNkIsQ0FBQztJQUN6QyxDQUFDO0NBQ0osQ0FBQTtBQUNELFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRTFCLGNBQWM7QUFFZCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUNwQyxNQUFNLFFBQVEsR0FBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sUUFBUSxHQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDakQsTUFBTSxVQUFVLEdBQXlCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUU5RSxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUQsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFELE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU5RCw0RkFBNEY7QUFFNUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLDBEQUEwRDtBQUNwRixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO0FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7QUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEVqZXJjaWNpbyAxXG5cbmltcG9ydCB7SXBlcnNvbn0gZnJvbSBcIi4vaVBlcnNvblwiO1xuXG5sZXQgYXJyb3dGdW5jID0gKHg6IElwZXJzb24gKTogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiA9PiB7XG4gICAgcmV0dXJuICBPYmplY3Qua2V5cyh4KS5tYXAoIChrZXkgOiBzdHJpbmcgKSA9PiB4W2tleSBhcyBrZXlvZiBJcGVyc29uXSk7XG59XG5cbmNvbnN0IHBlcnNvbjogSXBlcnNvbiA9IHtcbiAgICBuYW1lOiBcIkp1YW5cIixcbiAgICBhZ2U6IDMwLFxuICAgIHByb2Zlc3Npb246IFwiRGV2ZWxvcGVyXCJcbn1cbmNvbnNvbGUubG9nKGFycm93RnVuYyhwZXJzb24pKTtcbmNvbnNvbGUubG9nKFwiRWplcmNpY2lvIDFcIilcblxuXG4vLyBFamVyY2ljaW8gMlxuXG5pbXBvcnQge0V4ZXJjaXNlMDJ9IGZyb20gXCIuL2V4ZXJjaXNlMDIuanNcIjtcblxuXG5jb25zdCBleGVyY2lzZTAyID0gbmV3IEV4ZXJjaXNlMDIoKTtcblxuY29uc29sZS5sb2coZXhlcmNpc2UwMi5zdW1PckNvbmNhdGVuYXRlKDQsIDMpKTsgLy8gN1xuY29uc29sZS5sb2coZXhlcmNpc2UwMi5zdW1PckNvbmNhdGVuYXRlKDQsIFwiaGVsbG9cIikpOyAvLyA0OmhlbGxvXG5jb25zb2xlLmxvZyhleGVyY2lzZTAyLnN1bU9yQ29uY2F0ZW5hdGUoXCJoZWxsb1wiLCBcIndvcmxkXCIpKTsgLy9oZWxsby13b3JsZFxuY29uc29sZS5sb2coXCJFamVyY2ljaW8gMlwiKVxuXG4vLyBFamVyY2ljaW8gM1xuaW1wb3J0IHtFeGVyY2lzZTAzfSBmcm9tIFwiLi9leGVyY2lzZTAzLmpzXCI7XG5pbXBvcnQge0ljYXJ9IGZyb20gXCIuL2lDYXJcIjtcbmltcG9ydCB7SW1vdG9yY3ljbGV9IGZyb20gXCIuL0ltb3RvcmN5Y2xlXCI7XG5jb25zdCBleGVyY2lzZTAzID0gbmV3IEV4ZXJjaXNlMDMoKTtcblxuY29uc3QgY2FyOiBJY2FyID0ge1xuICAgIHRpcmVzOiA0LFxuICAgIHR1cm5PbkVuZ2luZTogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlR1cm5pbmcgb24gIGNhciBlbmdpbmVcIik7XG4gICAgICAgIHJldHVybiBcIlR1cm5pbmcgb24gIGNhciBlbmdpbmVcIjtcbiAgICB9LFxuICAgIHByZXNzUGVkYWw6ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQcmVzc2luZyBjYXIgcGVkYWxcIik7XG4gICAgICAgIHJldHVybiBcIlByZXNzaW5nIGNhciBwZWRhbFwiO1xuICAgIH1cbn1cbmNvbnN0IG1vdG9yY3ljbGU6IEltb3RvcmN5Y2xlID0ge1xuICAgIHRpcmVzOiAyLFxuICAgIHR1cm5PbkVuZ2luZTogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlR1cm5pbmcgb24gbW90b3JjeWNsZSBlbmdpbmVcIik7XG4gICAgICAgIHJldHVybiBcIlR1cm5pbmcgb24gbW90b3JjeWNsZSBlbmdpbmVcIjtcbiAgICB9LFxuICAgIG9wZW5UaHJvdHRsZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJPcGVuaW5nIG1vdG9yY3ljbGUgdGhyb3R0bGVcIik7XG4gICAgICAgIHJldHVybiBcIk9wZW5pbmcgbW90b3JjeWNsZSB0aHJvdHRsZVwiO1xuICAgIH1cbn1cbmV4ZXJjaXNlMDMuc3RhcnRNYXJ0Y2goY2FyKTtcbmV4ZXJjaXNlMDMuc3RhcnRNYXJ0Y2gobW90b3JjeWNsZSk7XG5jb25zb2xlLmxvZyhcIkVqZXJjaWNpbyAzXCIpXG5cbi8vIEVqZXJjaWNpbyA0XG5cbmltcG9ydCB7RXhlcmNpc2UwNH0gZnJvbSBcIi4vZXhlcmNpc2UwNC5qc1wiO1xuY29uc3QgZXhlcmNpc2UwNCA9IG5ldyBFeGVyY2lzZTA0KCk7XG5jb25zdCBzdHJBcnJheTogc3RyaW5nW10gPSBbJ0hlbGxvJywgJ1dvcmxkJywgJ0ltJywgJ2EnLCAnRnVsbCcsICdTdGFjaycsICdEZXZlbG9wZXInXTtcbmNvbnN0IG51bUFycmF5OiBudW1iZXJbXSA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3XTtcbmNvbnN0IG1peGVkQXJyYXk6IEFycmF5PG51bWJlcnxzdHJpbmc+ID0gWydIZWxsbycsICdJJywgJ2hhdmUnLCAzLCAndGFza3MnXTtcbmNvbnN0IHVuc3VwcG9ydGVkQXJyYXkgPSBbe25hbWU6ICdMdWNhcycsIHN1cm5hbWU6ICdGZXJuYW5kZXonfSwgJ0hlbGxvJywgMjJdO1xuXG5jb25zdCBuZXdTdHJBcnJheSA9IGV4ZXJjaXNlMDQucmVtb3ZlRmlyc3RFbnRyeShzdHJBcnJheSk7XG5jb25zdCBuZXdOdW1BcnJheSA9IGV4ZXJjaXNlMDQucmVtb3ZlRmlyc3RFbnRyeShudW1BcnJheSk7XG5jb25zdCBuZXdNaXhlZEFycmF5ID0gZXhlcmNpc2UwNC5yZW1vdmVGaXJzdEVudHJ5KG1peGVkQXJyYXkpO1xuXG4vL2NvbnN0IG5ld1Vuc3VwcG9ydGVkQXJyYXkgPSBleGVyY2lzZTA0LnJlbW92ZUZpcnN0RW50cnkodW5zdXBwb3J0ZWRBcnJheSk7IC8vLS0+IHdpbGwgZmFpbFxuXG5jb25zb2xlLmxvZyhuZXdTdHJBcnJheSk7IC8vIC0tPiBbJ1dvcmxkJywgJ0ltJywgJ2EnLCAnRnVsbCcsICdTdGFjaycsICdEZXZlbG9wZXInXTtcbmNvbnNvbGUubG9nKG5ld051bUFycmF5KTsgLy8gLS0+IFsyLCAzLCA0LCA1LCA2LCA3XTtcbmNvbnNvbGUubG9nKG5ld01peGVkQXJyYXkpOyAvLyAtLT4gWydJJywgJ2hhdmUnLCAzLCAndGFza3MnXTtcbmNvbnNvbGUubG9nKFwiRWplcmNpY2lvIDRcIikiXX0=